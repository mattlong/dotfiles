#!/bin/bash

export CLICOLOR=1
export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

# export VIRTUALENVWRAPPER_PYTHON="/usr/local/bin/python2"
# export VIRTUALENVWRAPPER_PYTHON="/usr/local/bin/python3"

# Use GNU coreutils instead of system defaults
#export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
#export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

# homebrew stuff
# export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

export PATH="/usr/local/opt/terraform@0.12/bin:$PATH"

# hardcoding output from this command bc speed
# export DYLD_LIBRARY_PATH="$(brew --prefix openssl)/lib:$DYLD_LIBRARY_PATH"
export DYLD_LIBRARY_PATH="/usr/local/opt/openssl/lib:$DYLD_LIBRARY_PATH"

alias flushdns="sudo dscacheutil -flushcache || true &&
                sudo killall -HUP mDNSResponder || true &&
                sudo discoveryutil mdnsflushcache || true &&
                sudo discoveryutil udnsflushcaches || true"

if [ -x /usr/local/opt/coreutils/libexec/gnubin/dircolors ]; then
    if [ -f ~/.dir_colors ]; then
        eval `/usr/local/opt/coreutils/libexec/gnubin/dircolors -b ~/.dir_colors`
    else
        eval `/usr/local/opt/coreutils/libexec/gnubin/dircolors -b`
    fi
	alias ls='/usr/local/opt/coreutils/libexec/gnubin/ls --color=auto'
else
    alias ls='ls -hG'
fi

brew_prefix=$(brew --prefix)
if [ -f ${brew_prefix}/etc/bash_completion ]; then
    . ${brew_prefix}/etc/bash_completion.d/git-prompt.sh
    . ${brew_prefix}/etc/bash_completion
else
    echo "WARNING: bash-completion missing."
    echo "To fix: brew install bash-completion"
fi
unset brew_prefix


if which mvim &> /dev/null; then
  alias vim='mvim -v'
fi

if which rbenv > /dev/null; then
  # time eval "$(rbenv init -)"

  # Skipping the rehash on shell load has few repercussions, since a rehash at
  # this juncture is not really useful. Rehashing is only necessary after
  # installing new gems, and you would perform this action manually, or you would
  # use the excellent rbenv-gem-rehash plugin which would do it automatically.
  # Additionally, this plugin will be deprecated soon, as the automatic rehash
  # action has just landed in rbenv core via rbenv issue #384.

  # However, if you still want to rehash on shell load, you can do so in a
  # backgrounded action. I found this method buried in a GitHub issue comment by
  # Phillip Ridlen.
  eval "$(rbenv init --no-rehash -)"
  (rbenv rehash &) 2> /dev/null
fi

nvmsh_file="/usr/local/opt/nvm/nvm.sh"

# dumb, slow way to initialize nvm
# export NVM_DIR="$HOME/.nvm"
# if [ -f "$nvmsh_file" ]; then
#   source "$nvmsh_file"
# fi

# https://www.growingwiththeweb.com/2018/01/slow-nvm-init.html
# This version will defer nvm initialisation until either nvm, node or npm is
# run, at which point it will also unalias all the commands so they all work off
# the PATH as normal and run the requested command. It also contains the niceties
# that come standard such as checking for the files and bash completion.

# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
if [ -s "$nvmsh_file" ] && [ ! "$(type -t __init_nvm)" = function ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
  declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
  function __init_nvm() {
    for i in "${__node_commands[@]}"; do unalias $i; done
    source "$nvmsh_file"
    unset __node_commands
    unset -f __init_nvm
  }
  for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
fi
